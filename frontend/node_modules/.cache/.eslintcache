[{"C:\\Users\\espin\\palmar-v1\\frontend\\src\\index.js":"1","C:\\Users\\espin\\palmar-v1\\frontend\\src\\App.js":"2","C:\\Users\\espin\\palmar-v1\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Header.jsx":"4","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Footer.jsx":"5","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\HomeScreen.jsx":"6","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Product.jsx":"7","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Rating.jsx":"8","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductScreen.jsx":"9","C:\\Users\\espin\\palmar-v1\\frontend\\src\\store.js":"10","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\apiSlice.js":"11","C:\\Users\\espin\\palmar-v1\\frontend\\src\\constants.js":"12","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\productsApiSlice.js":"13","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Loader.jsx":"14","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Message.jsx":"15","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\cartSlice.js":"16","C:\\Users\\espin\\palmar-v1\\frontend\\src\\utils\\cartUtils.js":"17","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\CartScreen.jsx":"18","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\authSlice.js":"19","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\LoginScreen.jsx":"20","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\FormContainer.jsx":"21","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\usersApiSlice.js":"22","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\SignupScreen.jsx":"23","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ShippingScreen.jsx":"24","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\PrivateRoute.jsx":"25","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\CheckoutSteps.jsx":"26","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\PaymentScreen.jsx":"27","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\PlaceOrderScreen.jsx":"28","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\ordersApiSlice.js":"29","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\OrderScreen.jsx":"30","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\DetailsScreen.jsx":"31","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\AdminRoute.jsx":"32","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\OrderListScreen.jsx":"33","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductListScreen.jsx":"34","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductEditScreen.jsx":"35","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\UserListScreen.jsx":"36","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\UserEditScreen.jsx":"37"},{"size":2949,"mtime":1689461888951,"results":"38","hashOfConfig":"39"},{"size":530,"mtime":1689153021884,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1688524730510,"results":"41","hashOfConfig":"39"},{"size":3856,"mtime":1689399098155,"results":"42","hashOfConfig":"39"},{"size":500,"mtime":1688633258726,"results":"43","hashOfConfig":"39"},{"size":899,"mtime":1688934018092,"results":"44","hashOfConfig":"39"},{"size":690,"mtime":1689465467932,"results":"45","hashOfConfig":"39"},{"size":919,"mtime":1688782482687,"results":"46","hashOfConfig":"39"},{"size":4335,"mtime":1689463417332,"results":"47","hashOfConfig":"39"},{"size":518,"mtime":1689150327572,"results":"48","hashOfConfig":"39"},{"size":309,"mtime":1688835939576,"results":"49","hashOfConfig":"39"},{"size":343,"mtime":1689442286181,"results":"50","hashOfConfig":"39"},{"size":1713,"mtime":1689447024000,"results":"51","hashOfConfig":"39"},{"size":351,"mtime":1688933714583,"results":"52","hashOfConfig":"39"},{"size":248,"mtime":1688934299328,"results":"53","hashOfConfig":"39"},{"size":1658,"mtime":1689243059135,"results":"54","hashOfConfig":"39"},{"size":916,"mtime":1689302869647,"results":"55","hashOfConfig":"39"},{"size":4272,"mtime":1689425622956,"results":"56","hashOfConfig":"39"},{"size":691,"mtime":1689156436051,"results":"57","hashOfConfig":"39"},{"size":2453,"mtime":1689156131212,"results":"58","hashOfConfig":"39"},{"size":320,"mtime":1689151065150,"results":"59","hashOfConfig":"39"},{"size":2046,"mtime":1689463333328,"results":"60","hashOfConfig":"39"},{"size":3312,"mtime":1689158035801,"results":"61","hashOfConfig":"39"},{"size":2582,"mtime":1689244276227,"results":"62","hashOfConfig":"39"},{"size":328,"mtime":1689214269292,"results":"63","hashOfConfig":"39"},{"size":1641,"mtime":1689215172768,"results":"64","hashOfConfig":"39"},{"size":2039,"mtime":1689218560298,"results":"65","hashOfConfig":"39"},{"size":6294,"mtime":1689305975586,"results":"66","hashOfConfig":"39"},{"size":1785,"mtime":1689415846269,"results":"67","hashOfConfig":"39"},{"size":6840,"mtime":1689416763210,"results":"68","hashOfConfig":"39"},{"size":5023,"mtime":1689426596830,"results":"69","hashOfConfig":"39"},{"size":373,"mtime":1689398215363,"results":"70","hashOfConfig":"39"},{"size":1747,"mtime":1689415331088,"results":"71","hashOfConfig":"39"},{"size":3053,"mtime":1689447358453,"results":"72","hashOfConfig":"39"},{"size":6602,"mtime":1689446509612,"results":"73","hashOfConfig":"39"},{"size":2084,"mtime":1689461879234,"results":"74","hashOfConfig":"39"},{"size":3411,"mtime":1689463122983,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kr1q8",{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"82"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\espin\\palmar-v1\\frontend\\src\\index.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\App.js",[],[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Header.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Footer.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\HomeScreen.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Product.jsx",["200"],[],"import React from 'react'\r\nimport { Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport Rating from './Rating'\r\n\r\nconst Product = ({ product }) => {\r\n  return (\r\n    <Card className='my-3 p-3 rounded'>\r\n      <Link to={`/product/${product._id}`}>\r\n        <Card.Img src={product.image} variant='top' />\r\n      </Link>\r\n\r\n      <Card.Body>\r\n        <Link to={`/product/${product._id}`}>\r\n          <Card.Title as='div' className='product-title'>\r\n            <strong>{product.name}</strong>\r\n          </Card.Title>\r\n        </Link>\r\n\r\n        <Card.Text as='h3'>MXN {product.price}.00</Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Product","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Rating.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductScreen.jsx",["201"],[],"\r\nimport { useState } from 'react' \r\nimport {Link, useParams, useNavigate} from 'react-router-dom'\r\nimport React from 'react'\r\nimport { Form, Row, Col, Image, ListGroup, Card, Button } from 'react-bootstrap'   \r\nimport Rating from '../components/Rating'\r\nimport { useDispatch } from 'react-redux'\r\nimport {useGetProductQuery} from '../slices/productsApiSlice'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport {addToCart} from  '../slices/cartSlice';\r\n\r\nconst ProductScreen = () => {\r\n    const { id: productId } = useParams();\r\n    const [qty, setQty] = useState(1);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const {data: product, isLoading, error } = useGetProductQuery(productId);\r\n\r\n    const addToCartHandler = () => {\r\n        dispatch(addToCart({ ...product, qty}));\r\n        navigate('/cart');\r\n    }\r\n    return <>\r\n        <Link className='btn btn-light my-3' to='/'>Return</Link>\r\n        {isLoading ? (\r\n            <Loader/>\r\n        ) : error ? (\r\n            <Message variant='danger'>\r\n                {error?.data?.message || error.error}        \r\n            </Message>\r\n        ) : (\r\n            <Row>\r\n            <Col md={5}>\r\n                <Image src={product.image} alt={product.name} fluid />\r\n            </Col>\r\n            <Col md={3}>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h3>{product.name}</h3>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>Price: ${product.price} MXN</ListGroup.Item>\r\n                    <ListGroup.Item>Description: {product.description}</ListGroup.Item>\r\n                </ListGroup>\r\n            </Col>\r\n            <Col md={3}>\r\n                <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>\r\n                                    Price:\r\n                                </Col>\r\n                                <Col>\r\n                                    <strong>${product.price}</strong>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Row>\r\n                                <Col>\r\n                                    Status:\r\n                                </Col>\r\n                                <Col>\r\n                                    <strong>{product.countInStock>0?'Available':'No Currently Available'}</strong>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n\r\n                        {product.countInStock > 0 && (\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>\r\n                                        Qty\r\n                                    </Col>\r\n                                    <Col>\r\n                                    <Form.Control \r\n                                        as='select'\r\n                                        value={qty}\r\n                                        onChange= {(ev)=> setQty(Number(ev.target.value))}> \r\n                                    { [...Array(product.countInStock).keys()].map((i) =>(\r\n                                        <option key={i +1} value={i+1}> \r\n                                            { i + 1 }\r\n                                        </option>\r\n                                    ) )}\r\n                                    </Form.Control>                                   \r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                        )}\r\n\r\n                        <ListGroup.Item>\r\n                            <Button className='btn-block' type='button' disabled={product.countInStock === 0} onClick={addToCartHandler}>\r\n                                Add to Card\r\n                            </Button>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n        )}\r\n    </>;\r\n}\r\nexport default ProductScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\store.js",["202"],[],"import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { apiSlice } from './slices/apiSlice';\r\nimport cartSliceReducer from './slices/cartSlice';\r\nimport authSliceReducer from './slices/authSlice';\r\n\r\nconst store = configureStore({\r\nreducer: {\r\n    [apiSlice.reducerPath]: apiSlice.reducer, \r\n    cart: cartSliceReducer,\r\n    auth: authSliceReducer\r\n},\r\nmiddleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(apiSlice.middleware),\r\ndevTools: true \r\n});\r\n \r\nexport default store; ","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\apiSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\constants.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\productsApiSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Loader.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\Message.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\cartSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\utils\\cartUtils.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\CartScreen.jsx",["203"],[],"import React from 'react'\r\n//import React, { useEffect } from 'react'\r\nimport { Link, useNavigate} from 'react-router-dom';\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card, ListGroupItem } from 'react-bootstrap';\r\nimport {FaTrash} from 'react-icons/fa';\r\nimport Message from '../components/Message';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addToCart, removeFromCart } from '../slices/cartSlice';\r\n\r\nconst CartScreen = () => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const cart = useSelector((state) => state.cart);\r\n    const { cartItems} = cart;  \r\n\r\n    const addToCartHandler = async (product, qty) => {\r\n        dispatch(addToCart({...product, qty}))\r\n    };\r\n\r\n    const removeFromCartHandler = async (id) => {\r\n        dispatch(removeFromCart(id));\r\n    };\r\n\r\n    const buyNowHandler =  () => {\r\n        navigate('/login?redirect=/shipping');\r\n    }\r\n\r\n    return <Row>\r\n        <Row>\r\n        <Col className='text-center'>        \r\n        <Link to='/' className='btn btn-sm mx-2 btn-primary' >\r\n                            Return\r\n        </Link>  \r\n        </Col>\r\n\r\n        </Row>\r\n        <Col md={8}>\r\n            <h1 style={{marginBottom: '20px'}}>Cart</h1>\r\n            { cartItems.length === 0 ? (\r\n                <Message>\r\n                    The cart is empty. Please go back to the main page and add at least one item.\r\n                </Message>\r\n            ) : (\r\n                <ListGroup variant='flush'>\r\n                    {cartItems.map((i) => (\r\n                        <ListGroup.Item key={i._id}>\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <Image src={i.image} alt={i.name} fluid rounded/>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Link to={`/product/${i._id}`}>\r\n                                        {i.name }\r\n                                    </Link>\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    ${i.price}\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                <Form.Control \r\n                                        as='select'\r\n                                        value={i.qty}\r\n                                        onChange= {(ev)=> addToCartHandler(i, Number(ev.target.value))}> \r\n                                    { [...Array(i.countInStock).keys()].map((i) =>(\r\n                                        <option key={i +1} value={i+1}> \r\n                                            { i + 1 }\r\n                                        </option>\r\n                                    ) )}\r\n                                    </Form.Control>     \r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <Button type='button' variant='light' onClick={() => removeFromCartHandler(i._id)}>\r\n                                        <FaTrash/>\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                    )}\r\n                </ListGroup>\r\n            )}\r\n        </Col>\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2>\r\n                            Subtotal({cartItems.reduce((acc, i) => acc + i.qty, 0)})\r\n                        </h2>\r\n                        <p>\r\n                            Price: { cartItems.reduce((acc, i) => acc + i.qty * i.price, 0).toFixed(2)}\r\n                        </p>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Button type='button' className='btn-block' disabled={ cartItems.length ===  0} onClick={buyNowHandler}>\r\n                            Buy Now\r\n                        </Button>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n    };\r\nexport default CartScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\authSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\LoginScreen.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\FormContainer.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\usersApiSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\SignupScreen.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ShippingScreen.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\PrivateRoute.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\CheckoutSteps.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\PaymentScreen.jsx",["204"],[],"import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { Form, Buttom, Col, Button } from 'react-bootstrap'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { useDispatch, useSelector } from 'react-redux'; \r\nimport { useNavigate } from 'react-router-dom'\r\nimport { savePaymentMethod } from '../slices/cartSlice'\r\n\r\nconst PaymentScreen = () => {\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    const cart = useSelector((state) => state.cart);\r\n    const {shippingAddress} = cart;\r\n\r\n    useEffect(()=>{\r\n        if (!shippingAddress){\r\n            navigate('/shipping');\r\n        }\r\n    },[shippingAddress, navigate]);\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        dispatch(savePaymentMethod(paymentMethod));\r\n        navigate('/placeorder');\r\n    }\r\n\r\n  return (\r\n    <FormContainer>\r\n        <CheckoutSteps step1 step2 step3/>\r\n        <h1>Payment</h1>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Method</Form.Label>\r\n                        <Col>    \r\n                            <Form.Check\r\n                            type='radio'\r\n                            className='my-2'\r\n                            label='PayPal or Credit Card'\r\n                            id='PayPal'\r\n                            name='paymentMethod'\r\n                            value='PayPal'\r\n                            checked\r\n                            onChange={(event) => setPaymentMethod(event.target.value)}\r\n                            ></Form.Check>                      \r\n                        </Col>\r\n                </Form.Group>\r\n                <Button type='submit' variant='primary'>\r\n                    Next\r\n                </Button>\r\n            </Form>\r\n    </FormContainer>\r\n  )\r\n}\r\n\r\nexport default PaymentScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\PlaceOrderScreen.jsx",["205"],[],"import React from 'react'\r\n// Check shipping fields\r\nimport { useEffect } from 'react'\r\nimport {Link, useNavigate} from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Button, Row, Col, ListGroup, Image, Card, ListGroupItem  } from 'react-bootstrap'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport {toast} from 'react-toastify';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport {useCreateOrderMutation} from '../slices/ordersApiSlice'; \r\nimport { clearCartItems } from '../slices/cartSlice'\r\n\r\n\r\nconst PlaceOrderScreen = () => {\r\n    const navigate = useNavigate();\r\n    const cart = useSelector((state) => state.cart);\r\n    const dispatch = useDispatch();\r\n    const [createOrder, {isLoading, error}] = useCreateOrderMutation();\r\n    useEffect(()=> {\r\n        if(!cart.shippingAddress.address){\r\n            navigate('/shipping');\r\n        }else if (!cart.paymentMethod){\r\n            navigate('/payment');\r\n        }\r\n\r\n    }, [cart.paymentMethod, cart.shippingAddress.address, navigate]);\r\n    console.log(cart.itemsPrice);\r\n    const placeOrderHandler = async () => {\r\n        try {\r\n            const res = await createOrder({\r\n                orderItems: cart.cartItems,\r\n                shippingAddress: cart.shippingAddress,\r\n                paymentMethod: cart.paymentMethod,\r\n                itemsPrice: cart.itemsPrice,\r\n                shippingPrice: cart.shippingPrice,\r\n                taxPrice: cart.taxPrice,\r\n                totalPrice: cart.totalPrice\r\n            }).unwrap();\r\n            dispatch(clearCartItems());\r\n            navigate(`/order/${res._id}`);\r\n        } catch (error) {\r\n            toast.error(error); \r\n        }\r\n\r\n    }\r\n  return <>\r\n    <CheckoutSteps step1 step2 step3 step4 />\r\n    <Row>\r\n        <Col md={8}>\r\n            <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                    <h2>Shipping</h2>\r\n                    <p>\r\n                        <strong>Address: </strong>\r\n                        {cart.shippingAddress.address}, {cart.shippingAddress.city}, {cart.shippingAddress.postalCode}, {cart.shippingAddress.country}\r\n                    </p>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <h2>Payment Method</h2>\r\n                    <strong>Method: </strong>\r\n                    {cart.paymentMethod}\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                    <h2>Items</h2>\r\n                    {cart.cartItems.length === 0 ? (\r\n                        <Message>Ups, cart empty</Message>\r\n                    ): (\r\n                        <ListGroup variant='flush'>\r\n                            {cart.cartItems.map((item, index) =>(\r\n                                <ListGroup.Item key={index}>\r\n                                    <Row>\r\n                                        <Col md={1}>\r\n                                            <Image src={item.image} alt={item.name} fluid rounded/>      \r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Link to={`/products/${item.product}`}>\r\n                                                {item.name}\r\n                                            </Link>\r\n                                        </Col >\r\n                                        <Col md={2}>\r\n                                            Qty: {item.qty}\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            Price: {item.price}\r\n                                        </Col>\r\n                                        <Col md={2}>\r\n                                            <strong>\r\n                                                Total: {item.qty * item.price}\r\n                                            </strong>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            )\r\n                            )}\r\n                        </ListGroup>\r\n                    )}\r\n                </ListGroup.Item>\r\n            </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n            <Card>\r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        <h2>Order Summary</h2>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Items: </Col>\r\n                            <Col>${cart.itemsPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Shipping: </Col>\r\n                            <Col>{cart.shippingPrice > 0 ? \"$\"+cart.shippingPrice : 'Free'}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Taxes: </Col>\r\n                            <Col>${cart.taxPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col>Total: </Col>\r\n                            <Col>${cart.totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                        type='button'\r\n                        className='btn-block'\r\n                        disabled={cart.cartItems.length === 0}\r\n                        onClick={placeOrderHandler}>\r\n                            Placer Order\r\n                        </Button>\r\n                        {isLoading && <Loader />}\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card>\r\n        </Col>\r\n    </Row>\r\n  </>;\r\n}\r\n\r\nexport default PlaceOrderScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\slices\\ordersApiSlice.js",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\OrderScreen.jsx",["206","207","208","209"],[],"import React from 'react'\r\nimport {Link, useParams} from 'react-router-dom'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card, ListGroupItem } from 'react-bootstrap';\r\nimport { useEffect} from 'react';\r\nimport { PayPalButtons, usePayPalScriptReducer} from '@paypal/react-paypal-js'\r\nimport { \r\n  useGetOrderDetailsQuery, \r\n  usePayOrderMutation, \r\n  useGetPayPalClientIdQuery,\r\n  useDeliverOrderMutation} from '../slices/ordersApiSlice'\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport {toast} from 'react-toastify'\r\nimport { UseSelector, useSelector } from 'react-redux';\r\n\r\nconst OrderScreen = () => {\r\n  const { id: orderId } = useParams();\r\n\r\n  const {data: order, refetch, isLoading, error} = useGetOrderDetailsQuery(orderId);\r\n  const [payOrder, {isLoading:isLoadingPay}] = usePayOrderMutation();\r\n  const [deliverOrder, {isLoading:isLoadingDeliver}] = useDeliverOrderMutation();\r\n  const [ {isPending}, paypalDispatch] =usePayPalScriptReducer();\r\n  const { data: paypal, isLoading: isLoadingPayPal, error: errorPayPal} = useGetPayPalClientIdQuery();\r\n  const {userInfo} = useSelector((state) => state.auth);\r\n\r\n  useEffect(() => {\r\n    if (!errorPayPal && !isLoadingPayPal && paypal.clientId) {\r\n      const loadPayPalScript = async () => {\r\n        paypalDispatch({\r\n          type: 'resetOptions',\r\n          value: {\r\n            'client-id': paypal.clientId,\r\n          currency: 'MXN'\r\n          }\r\n        });\r\n        paypalDispatch({type: 'setLoadingStatus', value: 'pending'});\r\n      } \r\n      if (order && !order.isPaid){\r\n        if (!window.paypal){\r\n          loadPayPalScript();\r\n        }\r\n      }\r\n    }\r\n  }, [order, paypal, paypalDispatch, isLoadingPayPal, errorPayPal]);\r\n\r\n  //FUNCTIONS\r\n  function onApprove(data, actions){\r\n    return actions.order.capture().then(async function(details){\r\n      try {\r\n        await payOrder({orderId, details});\r\n        refetch();\r\n        toast.success('Payment successful');\r\n      } catch (err) {\r\n        toast.error(err?.data?.message || err.message);\r\n      }\r\n    });\r\n  }\r\n  async function onApproveTest(){\r\n    await payOrder({orderId, details: {payer: {}}});\r\n    refetch();\r\n    toast.success('Payment successful');\r\n  }\r\n\r\n  function onError(err){\r\n    toast.error(err.message);\r\n  }\r\n\r\n  function createOrder(data, actions){\r\n    return actions.order.create({\r\n      purchase_units: [\r\n        {\r\n          amount: {\r\n            value: order.totalPrice,\r\n          },\r\n        },\r\n      ],\r\n    }).then((orderId) =>{\r\n      return orderId;\r\n    });\r\n  }\r\n\r\n  const deliverOrderHandler = async () => {\r\n    try {\r\n      await deliverOrder(orderId);\r\n      refetch();\r\n      toast.success('Order marked as delivered');\r\n    } catch (err) {\r\n      toast.error(err.data.message || err.message);\r\n    }\r\n  } \r\n  \r\n  return isLoading ? <Loader /> : error ? <Message variant='danger' /> : (\r\n    <>\r\n      <Row>\r\n        <ListGroup.Item>\r\n        </ListGroup.Item>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n          <Card>\r\n            <ListGroup.Item>\r\n            <h3>Order Details</h3>\r\n              <p>\r\n                <strong>Order Number: </strong>{order._id}\r\n              </p>\r\n              <p>\r\n                <strong>Name: </strong>{order.user.name}\r\n              </p>\r\n              <p>\r\n                <strong>Email: </strong>{order.user.email}\r\n              </p>\r\n              <p>\r\n                <strong>Address: </strong> {order.shippingAddress.address}, {order.shippingAddress.city}, {order.shippingAddress.postalCode}, {order.shippingAddress.country}\r\n              </p>\r\n              <p>\r\n                <strong>Delivered: </strong>{order.isDelivered ? (`Delivered on ${order.deliveredAt.substring(0,10)}`\r\n                ) : ( 'Not delivered, estimated date in 7 days after purchase'\r\n                )}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n            <h3>Payment Details</h3>\r\n              <p>\r\n                <strong>Method:</strong> {order.paymentMethod}\r\n              </p>\r\n              <p>\r\n                <strong>Payment: </strong>{order.isPaid ? (`Paid on ${order.paidAt}`\r\n                ) : ( 'Pending'\r\n                )}\r\n              </p>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <h3>Products</h3>\r\n              {order.orderItems.map((item, index) => (\r\n                <ListGroup.Item key={index}>\r\n                  <Row>\r\n                    <Col md={2}>\r\n                      <Image src={item.image} alt={item.name} fluid rounded />\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={2}>\r\n                      <Link to={`/product/${item.product}`}>\r\n                        {item.name} (1)\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col md={2}>\r\n                       ${item.price*item.qty}\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n              ))}\r\n            </ListGroup.Item>\r\n          </Card>\r\n        </ListGroup>\r\n        </Col>\r\n        <Col>\r\n        <Card>\r\n            <ListGroup>\r\n              <ListGroup.Item>\r\n                <h2>Payment Order</h2>  \r\n                <p>\r\n                <strong>Items price: </strong>${order.itemsPrice}\r\n              </p>\r\n              <p>\r\n                <strong>Shipping price: </strong>${order.shippingPrice}\r\n              </p>\r\n              <p>\r\n                <strong>Tax price: </strong>${order.taxPrice}\r\n              </p>\r\n              <p>\r\n                <strong>Total Amount: </strong>${order.totalPrice}\r\n              </p>\r\n              </ListGroup.Item>\r\n                {!order.isPaid && (\r\n                  <ListGroup.Item>\r\n                  {isLoadingPay && <Loader/>}\r\n                  {isPending ?<Loader/> : (\r\n                      <div>\r\n                        <PayPalButtons createOrder={createOrder} onApprove={onApprove} onError={onError}></PayPalButtons>\r\n                      </div>\r\n                  )}\r\n                  </ListGroup.Item>\r\n                )}\r\n                {isLoadingDeliver && <Loader/>}\r\n                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered &&(\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={deliverOrderHandler}>\r\n                        Order Has Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderScreen;","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\DetailsScreen.jsx",["210","211","212","213"],[],"import {useState, useEffect} from 'react'\r\nimport {Form, Table, Row, Col, Button, Card, ListGroup, ListGroupItem} from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toast} from 'react-toastify';\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDetailsMutation } from '../slices/usersApiSlice';\r\nimport { setCredentials } from '../slices/authSlice';\r\nimport { useGetMyOrdersQuery } from '../slices/ordersApiSlice'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst DetailsScreen = () => {\r\n    const [name, setName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [confirmPassword, setConfirmPassword] = useState();\r\n\r\n    const dispatch = useDispatch();\r\n    const {userInfo} = useSelector((state) => state.auth);\r\n\r\n    const [updateDetails, {isLoading:loadingUpdateDetails}] = useDetailsMutation();\r\n\r\n    const { data: orders, isLoading, error } = useGetMyOrdersQuery();\r\n\r\n    useEffect(() => {\r\n        if (userInfo){\r\n            setName(userInfo.name);\r\n            setEmail(userInfo.email);\r\n        }\r\n    }, [userInfo, userInfo.name, userInfo.email]);\r\n\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        if (password !== confirmPassword) {\r\n          toast.error('Passwords do not match')\r\n        } else {\r\n          try {\r\n            const res = await updateDetails({_id: userInfo._id, name, email, password}).unwrap();\r\n            dispatch(setCredentials(res));\r\n            toast.success('Updated');\r\n          } catch (err) {\r\n            toast.error(err?.data?.message || err.error);\r\n          }\r\n        }\r\n    }\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={4}>\r\n        \r\n\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>User Details</Card.Title>\r\n                <Form onSubmit={submitHandler}>\r\n                  <Form.Group controlId='name' className='my-2'>\r\n                    <Form.Label>Full Name</Form.Label>\r\n                    <Form.Control type='text' placeholder='Name' value={name} onChange={(event) => setName(event.target.value)}></Form.Control> \r\n                  </Form.Group>\r\n                  <Form.Group controlId='name' className='my-2'>\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control type='email' placeholder='Email' value={email} onChange={(event) => setEmail(event.target.value)}></Form.Control> \r\n                  </Form.Group>\r\n                  <Form.Group controlId='password' className='my-2'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control type='password' placeholder='Password' value={password} onChange={(event) => setPassword(event.target.value)}></Form.Control> \r\n                  </Form.Group>\r\n                  <Form.Group controlId='password' className='my-2'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control type='password' placeholder='Confirm password' value={confirmPassword} onChange={(event) => setConfirmPassword(event.target.value)}></Form.Control> \r\n                  </Form.Group>\r\n                  <Button type='submit' variant='primary' className='my-2'>Update information</Button>\r\n                  {loadingUpdateDetails && <Loader/>}        \r\n                </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n      <Col md={5}>\r\n        {isLoading ? <Loader/>: error ? (<Message variant='danger'>\r\n        {error?.data?.message || error.error}\r\n        </Message>) : (\r\n          <Card>\r\n            <Card.Body>\r\n            <Card.Title>My Orders</Card.Title>\r\n              {orders.map((order) => (\r\n                <Card.Body>\r\n                    <Card.Title>{order._id}</Card.Title>\r\n                    \r\n                    <p>\r\n                    <strong>Created At: </strong>{order.createdAt.substring(0,10)}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Total Price: </strong>${order.totalPrice}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Paid At: </strong>{order.isPaid ? (\r\n                   `${order.paidAt.substring(0,10)}`\r\n                  ) : (\r\n                    'Pending payment'\r\n                  )}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Delivered At: </strong>{order.isDelivered ? (\r\n                   `${order.deliveredAt.substring(0,10)}`\r\n                  ) : (\r\n                    'In process'\r\n                  )}\r\n                  </p>\r\n                  <p>\r\n                    <Link to={`/order/${order._id}`}>\r\n                      Details\r\n                    </Link>\r\n                  </p>\r\n                  \r\n                </Card.Body>\r\n              ))}\r\n            </Card.Body>\r\n          </Card>\r\n        ) }\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default DetailsScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\components\\AdminRoute.jsx",[],[],"C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\OrderListScreen.jsx",["214","215","216","217","218","219","220"],[],"import React from 'react'\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport {Form, Table, Row, Col, Button, Card, ListGroup, ListGroupItem} from 'react-bootstrap';\r\nimport { useGetAllOrdersQuery } from '../slices/ordersApiSlice';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst OrderListScreen = () => {\r\n  const { data: orders, isLoading, error } = useGetAllOrdersQuery();\r\n\r\n  return <>\r\n    <h1>All Orders</h1>\r\n    {isLoading ? <Loader /> : error ? <Message variant ='danger'>{error}\r\n    </Message>: (\r\n      <Table striped bordered hover responsive className='table-sm' variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>ID Order</th>\r\n            <th>User</th>\r\n            <th>Date</th>\r\n            <th>Total Amount</th>\r\n            <th>Paid</th>\r\n            <th>Delivered</th>\r\n            <th>Details</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {orders.map((order) =>\r\n          <tr key={order._id}>\r\n            <td>{order._id}</td>\r\n            <td>{order.user && order.user.name}</td>\r\n            <td>{order.createdAt.substring(0,10)}</td>\r\n            <td>{order.totalPrice}</td>\r\n            <td>{order.isPaid ? (\r\n              order.paidAt.substring(0,10)\r\n              ) : ( \r\n                'Pending'\r\n              )}</td>\r\n            <td>{order.isDelivered ? (\r\n              order.deliveredAt.substring(0,10)\r\n              ) : ( \r\n                'In process'\r\n              )}</td>\r\n            <td>\r\n              <Link to={`/order/${order._id}`}>\r\n                      Details\r\n              </Link>\r\n            </td>\r\n          </tr>)}\r\n        </tbody>\r\n      </Table>\r\n    )}\r\n  </>;\r\n}\r\n\r\nexport default OrderListScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductListScreen.jsx",["221","222","223","224"],[],"import React from 'react'\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport {Form, Table, Row, Col, Button, Card, ListGroup, ListGroupItem} from 'react-bootstrap';\r\nimport { useGetProductsQuery, useCreateProductMutation, useDeleteProductMutation } from '../slices/productsApiSlice';\r\nimport { Link } from 'react-router-dom'\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\n\r\nconst ProductListScreen = () => {\r\n  const {data: products, refetch, isLoading, error} = useGetProductsQuery();\r\n  const [createProduct,{isLoading: isLoadingCreateProduct}] = useCreateProductMutation();\r\n  const [deleteProduct,{isLoading: isLoadingDeleteProduct}] = useDeleteProductMutation();\r\n  const deleteHandler = async (id) => {\r\n    try {\r\n      await deleteProduct(id);\r\n      toast.success('Product deleted successfully')\r\n      refetch();\r\n    } catch (err) {\r\n      toast.error(err?.data?.message || err.message);\r\n    }\r\n  };\r\n  const createProductHandler = async () => {\r\n    try {\r\n      await createProduct();\r\n      refetch();\r\n    } catch (err) {\r\n      toast.error(err?.data?.message || err.error);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Row className='align-items-center'>\r\n        <Col>\r\n          <h1>Products</h1>\r\n        </Col>\r\n        <Col className='text-end'>\r\n          <Button className='btn-sm m-3' onClick={createProductHandler}>\r\n            Create New Product\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      {isLoadingCreateProduct && <Loader />}\r\n      {isLoadingDeleteProduct && <Loader />}\r\n      {isLoading ? <Loader /> : error ? <Message>{error}</Message> : (\r\n            <>\r\n              <Table striped bordered hover responsive className='table-sm' variant=\"dark\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Product ID</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                    <th>Category</th>\r\n                    <th>Brand</th>\r\n                    <th>Tools</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {products.map((product) => (\r\n                    <tr key={product._id}>\r\n                      <td>{product._id}</td>\r\n                      <td>{product.name}</td>\r\n                      <td>{product.price}</td>\r\n                      <td>{product.category}</td>\r\n                      <td>{product.brand}</td>\r\n                      <td>\r\n                        <Link to={`/admin/product/${product._id}/edit`} className='btn btn-sm mx-2 btn-primary' >\r\n                            Edit\r\n                        </Link>                        \r\n                        <Button className='btn-sm mx-2' variant='danger' onClick={() => deleteHandler(product._id)}>\r\n                          Delete\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </>\r\n          )}\r\n    </>\r\n  );\r\n};\r\nexport default ProductListScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\ProductEditScreen.jsx",["225"],[],"import React from 'react'\r\nimport {useState, useEffect } from 'react'\r\nimport { Link, useNavigate, useParams} from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport {toast} from 'react-toastify'\r\nimport { useGetProductQuery, useUpdateProductMutation, useUploadProductImageMutation} from '../slices/productsApiSlice'\r\n\r\nconst ProductEditScreen = () => {\r\n    const {id: productId} = useParams();\r\n\r\n    const [name, setName] = useState('');\r\n    const [price, setPrice] = useState(0);\r\n    const [image, setImage] = useState('');\r\n    const [brand, setBrand] = useState('');\r\n    const [category, setCategory] = useState('');\r\n    const [countInStock, setCountInStock] = useState(0);\r\n    const [description, setDescription] = useState('');\r\n\r\n    const {\r\n        data: product,\r\n        isLoading,\r\n        refetch,\r\n        error,\r\n    } = useGetProductQuery(productId);\r\n    \r\n    const[updateProduct, {isLoading: isLoadingUpdate}] = useUpdateProductMutation();\r\n\r\n    const [uploloadProductImage,{isLoading: isLoadingUpload}] = useUploadProductImageMutation();\r\n    \r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() =>{\r\n        if(product) {\r\n            setName(product.name);\r\n            setPrice(product.price);\r\n            setImage(product.image);\r\n            setBrand(product.brand);\r\n            setCategory(product.category);\r\n            setCountInStock(product.countInStock);\r\n            setDescription(product.description);\r\n        }\r\n    }, [product]);\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        const updatedProduct = {\r\n            _id:productId,\r\n            name,\r\n            price,\r\n            image,\r\n            brand,\r\n            category,\r\n            countInStock,\r\n            description\r\n        }; \r\n\r\n        const result = await updateProduct(updatedProduct);\r\n        refetch();\r\n        if (result.error){\r\n            toast.error(result.error);\r\n\r\n        }else {\r\n            toast.success('Information updated');\r\n            navigate('/admin/productlist');\r\n        }\r\n    }\r\n\r\n    const uploadFileHandler = async (event) => {\r\n        const formData = new FormData();\r\n        formData.append('image', event.target.files[0]);\r\n        try {\r\n            const res = await uploloadProductImage(formData).unwrap();\r\n            toast.success(res.message);\r\n            setImage(res.image);\r\n        } catch (err) {\r\n            toast.error(err?.data?.message || error.error);\r\n        }\r\n    }\r\n  return (\r\n    <>\r\n        <Link to='/admin/productlist' className='btn my-3 btn-primary' >\r\n            Return\r\n        </Link>\r\n        <FormContainer>\r\n            <h1>\r\n                Edit Product\r\n            </h1>\r\n            {isLoadingUpdate && <Loader/>}\r\n            {isLoading ? <Loader/> : error ? <Message>{error}</Message> : (\r\n                <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='name' className='my-3'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Name'\r\n                        value={name}\r\n                        onChange={(event) => setName(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='price' className='my-3'>\r\n                        <Form.Label>Price</Form.Label>\r\n                        <Form.Control\r\n                        type='number'\r\n                        placeholder='Price'\r\n                        value={price}\r\n                        onChange={(event) => setPrice(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='brand' className='my-3'>\r\n                        <Form.Label>Brand</Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Brand'\r\n                        value={brand}\r\n                        onChange={(event) => setBrand(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='countInStock' className='my-3'>\r\n                        <Form.Label>Availability</Form.Label>\r\n                        <Form.Control\r\n                        type='number'\r\n                        placeholder='Availability'\r\n                        value={countInStock}\r\n                        onChange={(event) => setCountInStock(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='category' className='my-3'>\r\n                        <Form.Label>Category</Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Category'\r\n                        value={category}\r\n                        onChange={(event) => setCategory(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='description' className='my-3'>\r\n                        <Form.Label>Description</Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Description'\r\n                        value={description}\r\n                        onChange={(event) => setDescription(event.target.value)}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='image' className='my-3'>\r\n                        <Form.Label>Image</Form.Label>\r\n                        <Form.Control\r\n                        type='text'\r\n                        placeholder='Image URL'\r\n                        value={image}\r\n                        onChange={(event) => setImage}>\r\n                        </Form.Control>\r\n                        <Form.Control type='file' label='Choose filel' onChange={uploadFileHandler}>\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button type='submit' variant='primary' className='my-3'>\r\n                        Update information\r\n                    </Button>\r\n                </Form>\r\n            )}\r\n        </FormContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductEditScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\UserListScreen.jsx",["226","227","228","229","230","231","232"],[],"import React from 'react'\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport {Form, Table, Row, Col, Button, Card, ListGroup, ListGroupItem} from 'react-bootstrap';\r\nimport { useGetUsersQuery, useDeleteUserMutation } from '../slices/usersApiSlice';\r\nimport { Link } from 'react-router-dom'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport {toast} from 'react-toastify'\r\n\r\nconst UserListScreen = () => {\r\n  const { data: users, refetch, isLoading, error } = useGetUsersQuery();\r\n\r\n  const[deleteUser, {isLoading: isLoadingDeleteProduct}] = useDeleteUserMutation();\r\n\r\n  const deleteHandler = async (id) => {\r\ntry {\r\n    await deleteUser(id);\r\n    toast.success('User deleted successfully');\r\n    refetch();\r\n} catch (err) {\r\n    toast.error(err?.data?.message || err.error);\r\n}  }\r\n\r\n  return <>\r\n    <h1>All Users</h1>\r\n    {isLoadingDeleteProduct && <Loader />}\r\n    {isLoading ? <Loader /> : error ? <Message variant ='danger'>{error}\r\n    </Message>: (\r\n      <Table striped bordered hover responsive className='table-sm' variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th>User ID</th>\r\n            <th>Full Name</th>\r\n            <th>Email</th>\r\n            <th>Admin</th>\r\n            <th>Details</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user) =>\r\n          <tr key={user._id}>\r\n            <td>{user._id}</td>\r\n            <td>{user.name}</td>\r\n            <td>{user.email}</td>\r\n            <td>{user.isAdmin ? (\r\n               'True'\r\n              ) : ( \r\n                'False'\r\n              )}</td>\r\n            <td>\r\n            <Link to={`/admin/user/${user._id}/edit`} className='btn btn-sm mx-2 btn-primary' >\r\n                Edit\r\n            </Link>                        \r\n            <Button className='btn-sm mx-2' variant='danger' onClick={() => deleteHandler(user._id)}>\r\n                Delete\r\n            </Button>\r\n            </td>\r\n          </tr>)}\r\n        </tbody>\r\n      </Table>\r\n    )}\r\n  </>;\r\n}\r\n\r\nexport default UserListScreen","C:\\Users\\espin\\palmar-v1\\frontend\\src\\screens\\UserEditScreen.jsx",[],[],{"ruleId":"233","severity":1,"message":"234","line":4,"column":8,"nodeType":"235","messageId":"236","endLine":4,"endColumn":14},{"ruleId":"233","severity":1,"message":"234","line":6,"column":8,"nodeType":"235","messageId":"236","endLine":6,"endColumn":14},{"ruleId":"233","severity":1,"message":"237","line":1,"column":26,"nodeType":"235","messageId":"236","endLine":1,"endColumn":46},{"ruleId":"233","severity":1,"message":"238","line":4,"column":58,"nodeType":"235","messageId":"236","endLine":4,"endColumn":71},{"ruleId":"233","severity":1,"message":"239","line":3,"column":16,"nodeType":"235","messageId":"236","endLine":3,"endColumn":22},{"ruleId":"233","severity":1,"message":"238","line":6,"column":52,"nodeType":"235","messageId":"236","endLine":6,"endColumn":65},{"ruleId":"233","severity":1,"message":"240","line":3,"column":38,"nodeType":"235","messageId":"236","endLine":3,"endColumn":42},{"ruleId":"233","severity":1,"message":"238","line":3,"column":58,"nodeType":"235","messageId":"236","endLine":3,"endColumn":71},{"ruleId":"233","severity":1,"message":"241","line":14,"column":10,"nodeType":"235","messageId":"236","endLine":14,"endColumn":21},{"ruleId":"233","severity":1,"message":"242","line":58,"column":18,"nodeType":"235","messageId":"236","endLine":58,"endColumn":31},{"ruleId":"233","severity":1,"message":"243","line":2,"column":15,"nodeType":"235","messageId":"236","endLine":2,"endColumn":20},{"ruleId":"233","severity":1,"message":"244","line":2,"column":46,"nodeType":"235","messageId":"236","endLine":2,"endColumn":55},{"ruleId":"233","severity":1,"message":"238","line":2,"column":57,"nodeType":"235","messageId":"236","endLine":2,"endColumn":70},{"ruleId":"233","severity":1,"message":"245","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":23},{"ruleId":"233","severity":1,"message":"240","line":4,"column":9,"nodeType":"235","messageId":"236","endLine":4,"endColumn":13},{"ruleId":"233","severity":1,"message":"246","line":4,"column":22,"nodeType":"235","messageId":"236","endLine":4,"endColumn":25},{"ruleId":"233","severity":1,"message":"247","line":4,"column":27,"nodeType":"235","messageId":"236","endLine":4,"endColumn":30},{"ruleId":"233","severity":1,"message":"248","line":4,"column":32,"nodeType":"235","messageId":"236","endLine":4,"endColumn":38},{"ruleId":"233","severity":1,"message":"249","line":4,"column":40,"nodeType":"235","messageId":"236","endLine":4,"endColumn":44},{"ruleId":"233","severity":1,"message":"244","line":4,"column":46,"nodeType":"235","messageId":"236","endLine":4,"endColumn":55},{"ruleId":"233","severity":1,"message":"238","line":4,"column":57,"nodeType":"235","messageId":"236","endLine":4,"endColumn":70},{"ruleId":"233","severity":1,"message":"240","line":4,"column":9,"nodeType":"235","messageId":"236","endLine":4,"endColumn":13},{"ruleId":"233","severity":1,"message":"249","line":4,"column":40,"nodeType":"235","messageId":"236","endLine":4,"endColumn":44},{"ruleId":"233","severity":1,"message":"244","line":4,"column":46,"nodeType":"235","messageId":"236","endLine":4,"endColumn":55},{"ruleId":"233","severity":1,"message":"238","line":4,"column":57,"nodeType":"235","messageId":"236","endLine":4,"endColumn":70},{"ruleId":"233","severity":1,"message":"250","line":31,"column":45,"nodeType":"235","messageId":"236","endLine":31,"endColumn":60},{"ruleId":"233","severity":1,"message":"240","line":4,"column":9,"nodeType":"235","messageId":"236","endLine":4,"endColumn":13},{"ruleId":"233","severity":1,"message":"246","line":4,"column":22,"nodeType":"235","messageId":"236","endLine":4,"endColumn":25},{"ruleId":"233","severity":1,"message":"247","line":4,"column":27,"nodeType":"235","messageId":"236","endLine":4,"endColumn":30},{"ruleId":"233","severity":1,"message":"249","line":4,"column":40,"nodeType":"235","messageId":"236","endLine":4,"endColumn":44},{"ruleId":"233","severity":1,"message":"244","line":4,"column":46,"nodeType":"235","messageId":"236","endLine":4,"endColumn":55},{"ruleId":"233","severity":1,"message":"238","line":4,"column":57,"nodeType":"235","messageId":"236","endLine":4,"endColumn":70},{"ruleId":"233","severity":1,"message":"245","line":7,"column":10,"nodeType":"235","messageId":"236","endLine":7,"endColumn":23},"no-unused-vars","'Rating' is defined but never used.","Identifier","unusedVar","'getDefaultMiddleware' is defined but never used.","'ListGroupItem' is defined but never used.","'Buttom' is defined but never used.","'Form' is defined but never used.","'UseSelector' is defined but never used.","'onApproveTest' is defined but never used.","'Table' is defined but never used.","'ListGroup' is defined but never used.","'LinkContainer' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'isLoadingUpload' is assigned a value but never used."]